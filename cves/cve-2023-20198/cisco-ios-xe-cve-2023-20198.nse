local http = require "http"
local stdnse = require "stdnse"
local shortport = require "shortport"
local table = require "table"
local string = require "string"
local nmap = require "nmap"
local io = require "io"

description = [[
This NSE script checks the target for the presence of the implant to CVE-2023-20198
]]
---
-- @usage
-- nmap --script cisco-ios-xe-cve-2023-20198 -p <port> <host>
-- nmap --script cisco-ios-xe-cve-2023-20198 -p <port> -iL <list_host>
---

categories = {"discovery", "exploit", "vuln", "malware"}
author = "Abdulla Abdullayev (@abuyv)"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"

portrule = shortport.ssl

action = function(host,port)
  local result = {}
  local response

  response = http.get(host, port,"/")
  if response.status == 200 and string.match(response.body, "<script>window.onload=function.*/webui") then
    table.insert(result, "Target: cpe:2.3:o:cisco:ios_xe:-:-:-:-:-:-:-:-")
    response = http.post(host, port, "/webui/logoutconfirm.html?logon_hash=1")    
    if response.status == 200 and string.match(response.body, "^%w%w%w%w%w%w%w%w%w%w%w%w%w%w%w%w%w%w%s+$") then
      implant_id = response.body
      table.insert(result, "Status: Host appears to be infected")
      table.insert(result, string.format("Implant-id: %s", implant_id))
    else
      table.insert(result, "Status: Host is not infected")
    end
    table.insert(result, "Reference: https://sec.cloudapps.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-iosxe-webui-privesc-j22SaA4z")
  else
    table.insert(result, "Target: cpe:2.3:o:-:-:-:-:-:-:-:-:-:-")
  end

  return stdnse.format_output(true, result)
end
